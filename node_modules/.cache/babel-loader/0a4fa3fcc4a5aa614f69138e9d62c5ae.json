{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GetLocation() {\n  _s();\n\n  const [location, setLocation] = useState({\n    loaded: false,\n    coordinates: {\n      lat: \"\",\n      lng: \"\"\n    }\n  });\n\n  const onSuccess = location => {\n    setLocation({\n      loaded: true,\n      coordinates: {\n        lat: location.coords.latitude,\n        lng: location.coords.longitude\n      }\n    });\n  };\n\n  const onError = error => {\n    setLocation({\n      loaded: true,\n      error\n    });\n  };\n\n  useEffect(() => {\n    if (!(\"geolocation\" in navigator)) {\n      onError({\n        code: 0,\n        message: \"Geolocation not supported\"\n      });\n    }\n\n    navigator.geolocation.getCurrentPosition(onSuccess, onError);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(GetLocation, \"qSR7GMGzib17vKJM0UFQaRG73cA=\");\n\n_c = GetLocation;\nexport default GetLocation;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetLocation\");","map":{"version":3,"names":["useEffect","useState","GetLocation","location","setLocation","loaded","coordinates","lat","lng","onSuccess","coords","latitude","longitude","onError","error","navigator","code","message","geolocation","getCurrentPosition"],"sources":["C:/xampp/htdocs/ok-weather-app/src/components/GetLocation.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nfunction GetLocation() {\r\n    const [location, setLocation] = useState({\r\n        loaded: false,\r\n        coordinates: {\r\n            lat: \"\",\r\n            lng: \"\"\r\n        }\r\n    });\r\n    const onSuccess = location => {\r\n        setLocation({\r\n            loaded: true,\r\n            coordinates: {\r\n                lat: location.coords.latitude,\r\n                lng: location.coords.longitude\r\n            }\r\n        });\r\n    }\r\n    const onError = error => {\r\n        setLocation({\r\n            loaded: true,\r\n            error\r\n        });\r\n    }\r\n    useEffect(() => {\r\n        if (!(\"geolocation\" in navigator)) {\r\n            onError({\r\n                code: 0,\r\n                message: \"Geolocation not supported\"\r\n            });\r\n        }\r\n        navigator.geolocation.getCurrentPosition(onSuccess, onError);\r\n    }, [])\r\n    return (\r\n        <>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GetLocation"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;;AAEA,SAASC,WAAT,GAAuB;EAAA;;EACnB,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC;IACrCI,MAAM,EAAE,KAD6B;IAErCC,WAAW,EAAE;MACTC,GAAG,EAAE,EADI;MAETC,GAAG,EAAE;IAFI;EAFwB,CAAD,CAAxC;;EAOA,MAAMC,SAAS,GAAGN,QAAQ,IAAI;IAC1BC,WAAW,CAAC;MACRC,MAAM,EAAE,IADA;MAERC,WAAW,EAAE;QACTC,GAAG,EAAEJ,QAAQ,CAACO,MAAT,CAAgBC,QADZ;QAETH,GAAG,EAAEL,QAAQ,CAACO,MAAT,CAAgBE;MAFZ;IAFL,CAAD,CAAX;EAOH,CARD;;EASA,MAAMC,OAAO,GAAGC,KAAK,IAAI;IACrBV,WAAW,CAAC;MACRC,MAAM,EAAE,IADA;MAERS;IAFQ,CAAD,CAAX;EAIH,CALD;;EAMAd,SAAS,CAAC,MAAM;IACZ,IAAI,EAAE,iBAAiBe,SAAnB,CAAJ,EAAmC;MAC/BF,OAAO,CAAC;QACJG,IAAI,EAAE,CADF;QAEJC,OAAO,EAAE;MAFL,CAAD,CAAP;IAIH;;IACDF,SAAS,CAACG,WAAV,CAAsBC,kBAAtB,CAAyCV,SAAzC,EAAoDI,OAApD;EACH,CARQ,EAQN,EARM,CAAT;EASA,oBACI,qCADJ;AAKH;;GArCQX,W;;KAAAA,W;AAuCT,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}